{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\projects\\\\gregjwild\\\\pages\\\\blog\\\\[postname].js\";\nimport Link from 'next/link';\nimport ReactMarkdown from 'react-markdown';\nimport Layout from '../../components/Layout';\nexport var __N_SSG = true;\nexport default function BlogPost(_ref) {\n  var siteTitle = _ref.siteTitle,\n      frontmatter = _ref.frontmatter,\n      markdownBody = _ref.markdownBody;\n  if (!frontmatter) return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    pageTitle: \"\".concat(siteTitle, \" | \").concat(frontmatter.title),\n    children: [/*#__PURE__*/_jsxDEV(\"article\", {\n      style: {\n        margin: '5% 10%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: frontmatter.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"First Published: \", frontmatter.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 11\n      }, this), frontmatter.updated ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Updated: \", frontmatter.updated]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 34\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n          source: markdownBody\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      href: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: \"Back to post list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 7\n  }, this);\n}\n/* \r\n  Here we get our posts, as well as our site config data. \r\n*/\n\n_c = BlogPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlogPost\");","map":{"version":3,"sources":["E:/projects/gregjwild/pages/blog/[postname].js"],"names":["Link","ReactMarkdown","Layout","BlogPost","siteTitle","frontmatter","markdownBody","title","margin","date","updated"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AAEA,OAAOC,aAAP,MAA0B,gBAA1B;AAEA,OAAOC,MAAP,MAAmB,yBAAnB;;AAEA,eAAe,SAASC,QAAT,OAA4D;AAAA,MAAxCC,SAAwC,QAAxCA,SAAwC;AAAA,MAA7BC,WAA6B,QAA7BA,WAA6B;AAAA,MAAhBC,YAAgB,QAAhBA,YAAgB;AACzE,MAAI,CAACD,WAAL,EAAkB,oBAAO,qCAAP;AAElB,sBACI,QAAC,MAAD;AAAQ,IAAA,SAAS,YAAKD,SAAL,gBAAoBC,WAAW,CAACE,KAAhC,CAAjB;AAAA,4BACE;AAAS,MAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAhB;AAAA,8BACE;AAAA,kBAAKH,WAAW,CAACE;AAAjB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,wCAAqBF,WAAW,CAACI,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAIIJ,WAAW,CAACK,OAAZ,gBAAqB;AAAA,gCAAaL,WAAW,CAACK,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,cAArB,GAA6D,IAJjE,eAME;AAAA;AAAA;AAAA;AAAA,cANF,eAOE;AAAA,+BACE,QAAC,aAAD;AAAe,UAAA,MAAM,EAAEJ;AAAvB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAYE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,GAAX;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBD;AACD;AACA;AACA;;KAxBwBH,Q","sourcesContent":["import Link from 'next/link'\r\nimport matter from 'gray-matter'\r\nimport ReactMarkdown from 'react-markdown'\r\n\r\nimport Layout from '../../components/Layout'\r\n\r\nexport default function BlogPost({ siteTitle, frontmatter, markdownBody }) {\r\n  if (!frontmatter) return <></>\r\n  \r\n  return (\r\n      <Layout pageTitle={`${siteTitle} | ${frontmatter.title}`} >\r\n        <article style={{margin: '5% 10%'}}>\r\n          <h1>{frontmatter.title}</h1>\r\n          <p>First Published: {frontmatter.date}</p>\r\n          {\r\n            frontmatter.updated? <p>Updated: {frontmatter.updated}</p> : null\r\n          }\r\n          <hr/>\r\n          <div>\r\n            <ReactMarkdown source={markdownBody} />\r\n          </div>\r\n        </article>\r\n        <Link href=\"/\">\r\n          <a>Back to post list</a>\r\n        </Link>\r\n      </Layout>\r\n  )\r\n}\r\n/* \r\n  Here we get our posts, as well as our site config data. \r\n*/\r\nexport async function getStaticProps({ ...ctx }) {\r\n  const { postname } = ctx.params\r\n\r\n  const content = await import(`./../posts/${postname}.md`)\r\n  const config = await import(`../../siteconfig.json`)\r\n  const data = matter(content.default)\r\n\r\n  return {\r\n    props: {\r\n      siteTitle: config.title,\r\n      frontmatter: data.data,\r\n      markdownBody: data.content,\r\n    },\r\n  }\r\n}\r\n\r\n/* \r\n  Here's a Next function: it creates a list of paths to be rendered as HTML when the \r\n  site is built.\r\n*/\r\nexport async function getStaticPaths() {\r\n  const blogSlugs = ((context) => {\r\n    // Gets a list of the MD filenames.\r\n    const keys = context.keys()\r\n    const data = keys.map((key, index) => {\r\n      // Cuts off the \".md\" in the filename. It is not welcome here. \r\n      let slug = key.replace(/^.*[\\\\\\/]/, '').slice(0, -3)\r\n      // Our URL slug.\r\n      return slug\r\n    })\r\n    return data\r\n  //require.context comes from webpack - it's used to get a list of markdown files.\r\n  })(require.context('./../posts', true, /\\.md$/))\r\n  // BEHOLD! Our URL path.\r\n  const paths = blogSlugs.map((slug) => `/blog/${slug}`)\r\n  // An object holding our paths, as well as noting that fallback is false - generating 404s.\r\n  return {\r\n    paths,\r\n    fallback: false,\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}