{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\projects\\\\gregjwild\\\\pages\\\\blog.js\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport Layout from \"../components/Layout\";\nimport PostList from '../components/PostList';\nimport matter from 'gray-matter';\n/* Here's what we're rendering in the index */\n\nconst Blog = (_ref) => {\n  let {\n    posts,\n    title,\n    description\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"posts\", \"title\", \"description\"]);\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    pageTitle: title,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"The Blog\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(PostList, {\n        posts: posts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Blog;\n/* \r\nThis is a Next function: it fetches data, and returns it as props to the page component.\r\n\r\nWe're getting data from the siteconfig.json file.\r\n*/\n\nexport async function getStaticProps() {\n  // Site Info\n  const configData = await import(`../siteconfig.json`); // Posts\n\n  const postsRaw = (context => {\n    const keys = context.keys();\n    const values = keys.map(context);\n    const data = keys.map((key, index) => {\n      let slug = key.replace(/^.*[\\\\\\/]/, '').slice(0, -3);\n      const value = values[index];\n      const document = matter(value.default);\n      return {\n        frontmatter: document.data,\n        markdownBody: document.content,\n        slug\n      };\n    });\n    return data;\n  })(require.context('./posts', true, /\\.md$/)); // Convert posts to dates \n\n\n  const postsWithDatesConverted = postsRaw => {\n    return postsRaw.map(post => {\n      post.frontmatter.date = new Date(post.frontmatter.date);\n      return post;\n    });\n  }; // Sort dates\n\n\n  const postsSorted = postsWithDatesConverted(postsRaw).slice().sort((a, b) => a.frontmatter.date - b.frontmatter.date).reverse(); // Convert dates to strings (as we need our function to return JSON);\n\n  let posts = postsSorted.map(post => {\n    post = post.frontmatter.date.toISOString().slice(0, 10);\n    console.log(post);\n    return post;\n  });\n  return {\n    props: {\n      posts,\n      title: configData.default.title,\n      description: configData.default.description\n    }\n  };\n}","map":{"version":3,"sources":["E:/projects/gregjwild/pages/blog.js"],"names":["Layout","PostList","matter","Blog","posts","title","description","props","getStaticProps","configData","postsRaw","context","keys","values","map","data","key","index","slug","replace","slice","value","document","default","frontmatter","markdownBody","content","require","postsWithDatesConverted","post","date","Date","postsSorted","sort","a","b","reverse","toISOString","console","log"],"mappings":"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","sourcesContent":["import Layout from \"../components/Layout\";\r\nimport PostList from '../components/PostList';\r\nimport matter from 'gray-matter';\r\n\r\n/* Here's what we're rendering in the index */\r\nconst Blog = ({ posts, title, description, ...props }) => {\r\n  return (\r\n    <Layout pageTitle={title}>\r\n      <h1 className=\"title\">The Blog</h1>\r\n      <main>\r\n        <PostList posts={posts}/>\r\n      </main>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default Blog\r\n\r\n/* \r\nThis is a Next function: it fetches data, and returns it as props to the page component.\r\n\r\nWe're getting data from the siteconfig.json file.\r\n*/\r\nexport async function getStaticProps() {\r\n  // Site Info\r\n  const configData = await import(`../siteconfig.json`)\r\n\r\n  // Posts\r\n  const postsRaw = ((context) => {\r\n    const keys = context.keys()\r\n    const values = keys.map(context)\r\n\r\n    const data = keys.map((key, index) => {\r\n      let slug = key.replace(/^.*[\\\\\\/]/, '').slice(0, -3)\r\n      const value = values[index];\r\n      const document = matter(value.default)\r\n      return {\r\n        frontmatter:document.data,\r\n        markdownBody: document.content,\r\n        slug\r\n      }\r\n    })\r\n    return data;\r\n\r\n  })(require.context('./posts', true, /\\.md$/)); \r\n\r\n  // Convert posts to dates \r\n  const postsWithDatesConverted = postsRaw => {\r\n      return postsRaw.map(post => {\r\n          post.frontmatter.date = new Date(post.frontmatter.date);\r\n          return post;\r\n      });\r\n  }\r\n\r\n\r\n  // Sort dates\r\n  const postsSorted = postsWithDatesConverted(postsRaw).slice().sort((a, b) => a.frontmatter.date - b.frontmatter.date).reverse()\r\n\r\n  // Convert dates to strings (as we need our function to return JSON);\r\n  let posts = postsSorted.map(post => {\r\n    post = post.frontmatter.date.toISOString().slice(0,10);\r\n    console.log(post)\r\n    return post;\r\n  })\r\n\r\n  return {\r\n    props: {\r\n      posts,\r\n      title: configData.default.title,\r\n      description: configData.default.description,\r\n    },\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}