{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport Layout from \"../components/Layout\";\nimport PostList from '../components/PostList';\nimport matter from 'gray-matter';\n/* Here's what we're rendering in the index */\n\nconst Blog = (_ref) => {\n  let {\n    posts,\n    title,\n    description\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"posts\", \"title\", \"description\"]);\n\n  return /*#__PURE__*/_jsxs(Layout, {\n    pageTitle: title,\n    children: [/*#__PURE__*/_jsx(\"h1\", {\n      className: \"title\",\n      children: \"The Blog\"\n    }), /*#__PURE__*/_jsx(\"main\", {\n      children: /*#__PURE__*/_jsx(PostList, {\n        posts: posts\n      })\n    })]\n  });\n};\n\nexport default Blog;\n/* \r\nThis is a Next function: it fetches data, and returns it as props to the page component.\r\n\r\nWe're getting data from the siteconfig.json file.\r\n*/\n\nexport async function getStaticProps() {\n  // Site Info\n  const configData = await import(`../siteconfig.json`); // Posts\n\n  const postsRaw = (context => {\n    const keys = context.keys();\n    const values = keys.map(context);\n    const data = keys.map((key, index) => {\n      let slug = key.replace(/^.*[\\\\\\/]/, '').slice(0, -3);\n      const value = values[index];\n      const document = matter(value.default);\n      return {\n        frontmatter: document.data,\n        markdownBody: document.content,\n        slug\n      };\n    });\n    return data;\n  })(require.context('./posts', true, /\\.md$/)); // Convert posts to dates \n\n\n  const postsWithDatesConverted = postsRaw => {\n    return postsRaw.map(post => {\n      post.frontmatter.date = new Date(post.frontmatter.date);\n      return post;\n    });\n  };\n  /* Sort dates\r\n    We use slice to avoid mutating postsRaw in place.\r\n    We need to reverse the array, otherwise they'll be displayed oldest-first.\r\n  */\n\n\n  const postsSorted = postsWithDatesConverted(postsRaw).slice().sort((a, b) => a.frontmatter.date - b.frontmatter.date).reverse(); // Convert dates to strings (as we need our function to return JSON);\n\n  const posts = postsSorted.map(post => {\n    post.frontmatter.date = post.frontmatter.date.toISOString().slice(0, 10);\n    return post;\n  });\n  return {\n    props: {\n      posts,\n      title: configData.default.title,\n      description: configData.default.description\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}