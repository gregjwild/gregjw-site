{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\projects\\\\new-blog\\\\pages\\\\blog\\\\[postname].js\";\nimport Link from 'next/link';\nimport matter from 'gray-matter';\nimport ReactMarkdown from 'react-markdown';\nimport Layout from '../../components/Layout';\nexport default function BlogPost({\n  siteTitle,\n  frontmatter,\n  markdownBody\n}) {\n  if (!frontmatter) return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    pageTitle: `${siteTitle} | ${frontmatter.title}`,\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      href: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: \"Back to post list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: frontmatter.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"By \", frontmatter.author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n          source: markdownBody\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 7\n  }, this);\n}\n/* \r\n  Here we get our posts, as well as our site config data. \r\n*/\n\nexport async function getStaticProps(_ref) {\n  let ctx = Object.assign({}, _ref);\n  const {\n    postname\n  } = ctx.params;\n  const content = await import(`./../posts/${postname}.md`);\n  const config = await import(`../../siteconfig.json`);\n  const data = matter(content.default);\n  return {\n    props: {\n      siteTitle: config.title,\n      frontmatter: data.data,\n      markdownBody: data.content\n    }\n  };\n}\n/* \r\n  Here's a Next function: it creates a list of paths to be rendered as HTML when the \r\n  site is built.\r\n*/\n\nexport async function getStaticPaths() {\n  const blogSlugs = (context => {\n    // Gets a list of the MD filenames.\n    const keys = context.keys();\n    const data = keys.map((key, index) => {\n      // Cuts off the \".md\" in the filename. It is not welcome here. \n      let slug = key.replace(/^.*[\\\\\\/]/, '').slice(0, -3); // Our URL slug.\n\n      return slug;\n    });\n    return data; //require.context comes from webpack - it's used to get a list of markdown files.\n  })(require.context('./../posts', true, /\\.md$/)); // BEHOLD! Our URL path.\n\n\n  const paths = blogSlugs.map(slug => `/blog/${slug}`);\n  return {\n    paths,\n    fallback: false\n  };\n}","map":{"version":3,"sources":["E:/projects/new-blog/pages/blog/[postname].js"],"names":["Link","matter","ReactMarkdown","Layout","BlogPost","siteTitle","frontmatter","markdownBody","title","author","getStaticProps","ctx","postname","params","content","config","data","default","props","getStaticPaths","blogSlugs","context","keys","map","key","index","slug","replace","slice","require","paths","fallback"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AAEA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,WAAb;AAA0BC,EAAAA;AAA1B,CAAlB,EAA4D;AACzE,MAAI,CAACD,WAAL,EAAkB,oBAAO,qCAAP;AAElB,sBACI,QAAC,MAAD;AAAQ,IAAA,SAAS,EAAG,GAAED,SAAU,MAAKC,WAAW,CAACE,KAAM,EAAvD;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,GAAX;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAA,8BACE;AAAA,kBAAKF,WAAW,CAACE;AAAjB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,0BAAOF,WAAW,CAACG,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,+BACE,QAAC,aAAD;AAAe,UAAA,MAAM,EAAEF;AAAvB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcD;AACD;AACA;AACA;;AACA,OAAO,eAAeG,cAAf,OAA0C;AAAA,MAAPC,GAAO;AAC/C,QAAM;AAAEC,IAAAA;AAAF,MAAeD,GAAG,CAACE,MAAzB;AAEA,QAAMC,OAAO,GAAG,MAAM,OAAQ,cAAaF,QAAS,KAA9B,CAAtB;AACA,QAAMG,MAAM,GAAG,MAAM,OAAQ,uBAAR,CAArB;AACA,QAAMC,IAAI,GAAGf,MAAM,CAACa,OAAO,CAACG,OAAT,CAAnB;AAEA,SAAO;AACLC,IAAAA,KAAK,EAAE;AACLb,MAAAA,SAAS,EAAEU,MAAM,CAACP,KADb;AAELF,MAAAA,WAAW,EAAEU,IAAI,CAACA,IAFb;AAGLT,MAAAA,YAAY,EAAES,IAAI,CAACF;AAHd;AADF,GAAP;AAOD;AAED;AACA;AACA;AACA;;AACA,OAAO,eAAeK,cAAf,GAAgC;AACrC,QAAMC,SAAS,GAAG,CAAEC,OAAD,IAAa;AAC9B;AACA,UAAMC,IAAI,GAAGD,OAAO,CAACC,IAAR,EAAb;AACA,UAAMN,IAAI,GAAGM,IAAI,CAACC,GAAL,CAAS,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACpC;AACA,UAAIC,IAAI,GAAGF,GAAG,CAACG,OAAJ,CAAY,WAAZ,EAAyB,EAAzB,EAA6BC,KAA7B,CAAmC,CAAnC,EAAsC,CAAC,CAAvC,CAAX,CAFoC,CAGpC;;AACA,aAAOF,IAAP;AACD,KALY,CAAb;AAMA,WAAOV,IAAP,CAT8B,CAUhC;AACC,GAXiB,EAWfa,OAAO,CAACR,OAAR,CAAgB,YAAhB,EAA8B,IAA9B,EAAoC,OAApC,CAXe,CAAlB,CADqC,CAarC;;;AACA,QAAMS,KAAK,GAAGV,SAAS,CAACG,GAAV,CAAeG,IAAD,IAAW,SAAQA,IAAK,EAAtC,CAAd;AAEA,SAAO;AACLI,IAAAA,KADK;AAELC,IAAAA,QAAQ,EAAE;AAFL,GAAP;AAID","sourcesContent":["import Link from 'next/link'\r\nimport matter from 'gray-matter'\r\nimport ReactMarkdown from 'react-markdown'\r\n\r\nimport Layout from '../../components/Layout'\r\n\r\nexport default function BlogPost({ siteTitle, frontmatter, markdownBody }) {\r\n  if (!frontmatter) return <></>\r\n\r\n  return (\r\n      <Layout pageTitle={`${siteTitle} | ${frontmatter.title}`}>\r\n        <Link href=\"/\">\r\n          <a>Back to post list</a>\r\n        </Link>\r\n        <article>\r\n          <h1>{frontmatter.title}</h1>\r\n          <p>By {frontmatter.author}</p>\r\n          <div>\r\n            <ReactMarkdown source={markdownBody} />\r\n          </div>\r\n        </article>\r\n      </Layout>\r\n  )\r\n}\r\n/* \r\n  Here we get our posts, as well as our site config data. \r\n*/\r\nexport async function getStaticProps({ ...ctx }) {\r\n  const { postname } = ctx.params\r\n\r\n  const content = await import(`./../posts/${postname}.md`)\r\n  const config = await import(`../../siteconfig.json`)\r\n  const data = matter(content.default)\r\n\r\n  return {\r\n    props: {\r\n      siteTitle: config.title,\r\n      frontmatter: data.data,\r\n      markdownBody: data.content,\r\n    },\r\n  }\r\n}\r\n\r\n/* \r\n  Here's a Next function: it creates a list of paths to be rendered as HTML when the \r\n  site is built.\r\n*/\r\nexport async function getStaticPaths() {\r\n  const blogSlugs = ((context) => {\r\n    // Gets a list of the MD filenames.\r\n    const keys = context.keys()\r\n    const data = keys.map((key, index) => {\r\n      // Cuts off the \".md\" in the filename. It is not welcome here. \r\n      let slug = key.replace(/^.*[\\\\\\/]/, '').slice(0, -3)\r\n      // Our URL slug.\r\n      return slug\r\n    })\r\n    return data\r\n  //require.context comes from webpack - it's used to get a list of markdown files.\r\n  })(require.context('./../posts', true, /\\.md$/))\r\n  // BEHOLD! Our URL path.\r\n  const paths = blogSlugs.map((slug) => `/blog/${slug}`)\r\n\r\n  return {\r\n    paths,\r\n    fallback: false,\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}