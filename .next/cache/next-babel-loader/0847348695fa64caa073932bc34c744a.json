{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport Link from 'next/link';\nimport matter from 'gray-matter';\nimport ReactMarkdown from 'react-markdown';\nimport Layout from '../../components/Layout';\nexport default function BlogPost({\n  siteTitle,\n  frontmatter,\n  markdownBody\n}) {\n  if (!frontmatter) return /*#__PURE__*/_jsx(_Fragment, {});\n  return /*#__PURE__*/_jsxs(Layout, {\n    pageTitle: `${siteTitle} | ${frontmatter.title}`,\n    children: [/*#__PURE__*/_jsxs(\"article\", {\n      children: [/*#__PURE__*/_jsx(\"h1\", {\n        children: frontmatter.title\n      }), /*#__PURE__*/_jsxs(\"p\", {\n        children: [\"First Published: \", frontmatter.date]\n      }), frontmatter.updated ? /*#__PURE__*/_jsxs(\"p\", {\n        children: [\"Last Updated: \", frontmatter.updated]\n      }) : null, /*#__PURE__*/_jsx(\"hr\", {}), /*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsx(ReactMarkdown, {\n          source: markdownBody\n        })\n      })]\n    }), /*#__PURE__*/_jsx(Link, {\n      href: \"/\",\n      children: /*#__PURE__*/_jsx(\"a\", {\n        children: \"Back to post list\"\n      })\n    })]\n  });\n}\n/* \r\n  Here we get our posts, as well as our site config data. \r\n*/\n\nexport async function getStaticProps(_ref) {\n  let ctx = Object.assign({}, _ref);\n  const {\n    postname\n  } = ctx.params;\n  const content = await import(`./../posts/${postname}.md`);\n  const config = await import(`../../siteconfig.json`);\n  const data = matter(content.default);\n  return {\n    props: {\n      siteTitle: config.title,\n      frontmatter: data.data,\n      markdownBody: data.content\n    }\n  };\n}\n/* \r\n  Here's a Next function: it creates a list of paths to be rendered as HTML when the \r\n  site is built.\r\n*/\n\nexport async function getStaticPaths() {\n  const blogSlugs = (context => {\n    // Gets a list of the MD filenames.\n    const keys = context.keys();\n    const data = keys.map((key, index) => {\n      // Cuts off the \".md\" in the filename. It is not welcome here. \n      let slug = key.replace(/^.*[\\\\\\/]/, '').slice(0, -3); // Our URL slug.\n\n      return slug;\n    });\n    return data; //require.context comes from webpack - it's used to get a list of markdown files.\n  })(require.context('./../posts', true, /\\.md$/)); // BEHOLD! Our URL path.\n\n\n  const paths = blogSlugs.map(slug => `/blog/${slug}`); // An object holding our paths, as well as noting that fallback is false - generating 404s.\n\n  return {\n    paths,\n    fallback: false\n  };\n}","map":null,"metadata":{},"sourceType":"module"}